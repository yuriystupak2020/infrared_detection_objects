

# Вот пример кода на Python, который определяет объекты на готовом инфракрасном видео:

import cv2

# Определить имя видеофайла
filename = "infrared_video_shorter.mp4"

# Создать объект VideoCapture
cap = cv2.VideoCapture(filename)

# Получить частоту кадров
fps = cap.get(cv2.CAP_PROP_FPS)

# Инициализировать объекты детектирования
hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

# Читать кадры и определять объекты
while cap.isOpened():
    # Считать кадр и преобразовать его в черно-белый формат
    ret, frame = cap.read()
    if ret:
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    else:
        break

    # Обнаружить объекты
    found, w = hog.detectMultiScale(gray, winStride=(8, 8), padding=(32, 32), scale=1.05)

    # Нарисовать прямоугольники вокруг обнаруженных объектов
    for x, y, w, h in found:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)

    # Показать результаты
    cv2.imshow('frame', frame)
    # Записать текущий кадр в файл
    out.write(frame)

    if cv2.waitKey(1) == ord('q'):
        break

# Освободить ресурсы
cap.release()
cv2.destroyAllWindows()

# Код работает с готовым видеофайлом, используя тот же метод детектирования объектов HOG,
# который применяется для онлайн видеопотока с камеры. Обратите внимание, что код останавливается,
# если пользователь нажимает клавишу "q".

# Для ускорения работы алгоритма можно попробовать несколько методов:
#
# Уменьшить размер изображения: если вам не нужна высокая точность детектирования объектов, вы можете уменьшить размер изображения. Это позволит алгоритму работать быстрее за счет уменьшения количества пикселей, которые нужно обработать.
#
# Использовать GPU: если у вас есть доступ к графическому процессору (GPU), вы можете использовать его для ускорения работы алгоритма. Некоторые библиотеки, такие как OpenCV, поддерживают обработку на GPU.
#
# Использовать многопоточность: вы можете разбить изображение на несколько частей и обрабатывать каждую часть в отдельном потоке. Это может ускорить работу алгоритма, особенно если у вас есть несколько ядер процессора.
#
# Использовать более быстрый алгоритм: существуют более быстрые алгоритмы, чем HOG, для детектирования объектов. Например, можно попробовать использовать нейронные сети, такие как YOLO или SSD, которые работают быстрее, но требуют больше вычислительных ресурсов.
#
# Использовать оптимизированные библиотеки: некоторые библиотеки, такие как dlib, имеют оптимизированные реализации алгоритмов детектирования объектов, которые работают быстрее, чем стандартные реализации.
